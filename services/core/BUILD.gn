# Copyright (c) 2022-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")

if (!defined(global_parts_info) ||
    defined(global_parts_info.account_os_account)) {
  has_os_account_part = true
} else {
  has_os_account_part = false
}

if (!defined(global_parts_info) ||
    defined(global_parts_info.notification_common_event_service)) {
  has_notification_common_event_service = true
} else {
  has_notification_common_event_service = false
}

config("userauth_service_core_config") {
  include_dirs = [
    "inc",
    "src",
    "../context/inc",
    "../ipc/inc",
  ]
}

ohos_source_set("userauth_service_core") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../../cfi_blocklist.txt"
  }
  branch_protector_ret = "pac_ret"
  include_dirs = [
    "inc",
    "src",
  ]

  remove_configs = [ "//build/config/compiler:no_exceptions" ]

  sources = [
    "src/auth_event_listener_manager.cpp",
    "src/authentication_impl.cpp",
    "src/credential_info_impl.cpp",
    "src/enrolled_info_impl.cpp",
    "src/enrollment_impl.cpp",
    "src/identification_impl.cpp",
    "src/ipc_common.cpp",
    "src/remote_executor_proxy.cpp",
    "src/remote_msg_util.cpp",
    "src/resource_node_impl.cpp",
    "src/resource_node_pool_impl.cpp",
    "src/resource_node_utils.cpp",
    "src/schedule_node_builder.cpp",
    "src/schedule_node_helper.cpp",
    "src/schedule_node_impl.cpp",
    "src/schedule_resource_node_listener.cpp",
    "src/secure_user_info_impl.cpp",
    "src/update_pin_param_impl.cpp",
    "src/user_idm_database_impl.cpp",
    "src/user_idm_session_controller_impl.cpp",
    "src/user_info_impl.cpp",
    "src/widget_schedule_node_impl.cpp",
  ]

  deps = [
    "../../frameworks/native/client:userauth_client",
    "../../frameworks/native/common:attributes",
    "../../frameworks/native/common:dfx",
    "../../services/base:userauth_service_base",
  ]

  external_deps = [
    "ability_runtime:app_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libtokenid_sdk",
    "c_utils:utils",
    "device_manager:devicemanagersdk",
    "drivers_interface_user_auth:libuser_auth_proxy_2.0",
    "hdf_core:libhdi",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  if (has_os_account_part) {
    cflags_cc = [ "-DHAS_OS_ACCOUNT_PART" ]
    external_deps += [ "os_account:os_account_innerkits" ]
  }

  if (has_notification_common_event_service) {
    sources += [ "src/publish_event_adapter.cpp" ]
    external_deps += [ "common_event_service:cesfwk_innerkits" ]
  } else {
    sources += [ "src/publish_event_adapter_mock.cpp" ]
  }

  public_configs = [ ":userauth_service_core_config" ]

  configs = [
    "../../common:iam_log_config",
    "../../common:iam_utils_config",
    "../../frameworks/native/ipc:userauth_client_ipc_config",
    "../remote_connect:userauth_service_remote_connect_config",
  ]

  subsystem_name = "useriam"
  part_name = "user_auth_framework"
}
