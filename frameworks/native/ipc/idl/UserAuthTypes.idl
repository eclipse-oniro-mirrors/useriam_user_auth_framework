/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package OHOS.UserIam.UserAuth;

/**
 * @brief Remote auth parameter.
 */
struct IpcRemoteAuthParam {
    /** Is with remote auth parameter */
    boolean isHasRemoteAuthParam;
    /** Is with verifier network id */
    boolean isHasVerifierNetworkId;
    /** verifier network id */
    String verifierNetworkId;
    /** Is with collector network id */
    boolean isHasCollectorNetworkId;
    /** collector network id */
    String collectorNetworkId;
    /** Is with collector token id  */
    boolean isHasCollectorTokenId;
    /** collector token id */
    unsigned int collectorTokenId;
};

/**
 * @brief Reuse unlock authentication result.
 */
struct IpcReuseUnlockResult {
    /** Whether to reuse unlock result, ReuseUnlockResult is valid only when isReuse is true.*/
    boolean isReuse;
    /** The mode for reusing unlock authentication result. */
    int reuseMode;
    /** The allowable reuse duration.The value of duration should be between 0 and MAX_ALLOWABLE_REUSE_DURATION. */
    unsigned long reuseDuration;
};

/**
 * @brief Global config value.
 */
struct IpcGlobalConfigValue {
    /** Global config value of pin expired period.It's value should between 0 and 2^50.
      * When pinExpiredPeriod <= 0, userAuth won't check pin expired period. */
    unsigned long pinExpiredPeriod;
    /** Enable specified authType capability. */
    boolean enableStatus;
};

/**
 * @brief Global config param.
 */
struct IpcGlobalConfigParam {
    /** Global config type. */
    int type;
    /** Global config value. */
    IpcGlobalConfigValue value;
    /** Specified userIds. GlobalConfigParam will be effect for all userspaces when the array is empty. */
    int[] userIds;
    /** Specified authTypes. Should not empty. */
    int[] authTypes;
};

/**
 * @brief Define credential enrollment information.
 */
struct IpcEnrolledInfo {
    /** Auth type supported by executor. */
    int authType;
    /** Enrolled ID. */
    unsigned long enrolledId;
};

struct IpcExecutorRegisterInfo {
    /** Auth type supported by executor. */
    int authType;
    /** Role supported by executor. */
    int executorRole;
    /** Multiple sensors index by executor. */
    unsigned int executorSensorHint;
    /** Matcher supported by executor. */
    unsigned int executorMatcher;
    /** Esl supported by executor. */
    int esl;
    /** Max Acl supported by executor. */
    unsigned int maxTemplateAcl;
    /** The pubKey of executor. */
    unsigned char[] publicKey;
    /** Device udid of executor. */
    String deviceUdid;
    /** The information of remote executor. */
    unsigned char[] signedRemoteExecutorInfo;
};

/**
 * @brief Auth parameter.
 */
struct IpcAuthParamInner {
    /** user id */
    int userId;
    /** is userId specified */
    boolean isUserIdSpecified;
    /** challenge value */
    unsigned char[] challenge;
    /** Credential type for authentication. */
    int authType;
    /** Credential type for authentication. */
    int[] authTypes;
    /** Trust level of authentication result. */
    int authTrustLevel;
    /** Reuse unlock authentication result. */
    IpcReuseUnlockResult reuseUnlockResult;
    /** Auth intention. */
    int authIntent;
    /** Skip locked biometric authentication */
    boolean skipLockedBiometricAuth;
};

/**
 * @brief EnrolledId digest and credential count.
 */
struct IpcEnrolledState {
    /** The credential digest. */
    unsigned long credentialDigest;
    /** The credential count */
    unsigned short credentialCount;
};

/**
 * @brief Auth widget parameter.
 */
struct IpcWidgetParamInner {
    /** Title of widget. */
    String title;
    /** The description text of navigation button. */
    String navigationButtonText;
    /** Full screen or not. */
    int windowMode;
    /** Default has't context. */
    boolean hasContext;
};

/**
 * @brief credential parameter.
 */
struct IpcCredentialPara {
    /** Credential type for authentication. */
    int authType;
    /* Auth subtype of PIN. */
    int pinType;
    /** Auth token. */
    unsigned char[] token;
};

/**
 * @brief User credential infomation returned.
 */
struct IpcCredentialInfo {
    /* Auth type supported by executor. */
    int authType;
    /* Auth subtype of PIN. */
    int pinType;
    /* User credentialId is generated by idm to associate userId and templateId. */
    unsigned long credentialId;
    /* User templateId is generated by executor to represent user characteristics. */
    unsigned long templateId;
    /* Abandoned flag of pin credential. */
    boolean isAbandoned;
    /* Valid period of credential remain. */
    long validityPeriod;
};

/**
 * @brief Define security user information.
 */
struct IpcSecUserInfo {
    /** Security user ID. */
    unsigned long secureUid;
    /** The user credential enrollment infomation. */
    IpcEnrolledInfo[] enrolledInfo;
};

/**
 * @brief Cred change info for notify event.
 */
struct IpcCredChangeEventInfo {
    /** The callerName who make cred change. */
    String callerName; 
    /** The callerType who make cred change. */
    int callerType;
    /** New credentialId when ADD_CRED or UPDATE_CRED. */
    unsigned long credentialId;
    /** Deleted credentialId when DEL_CRED or UPDATE_CRED. */
    unsigned long lastCredentialId;
    /** Is silent cred change. */
    boolean isSilentCredChange;
};