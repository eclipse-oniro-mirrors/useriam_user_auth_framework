# Copyright (c) 2022-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build/ohos.gni")
import("//build/test.gni")

ohos_unittest("iam_executors_test") {
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "../../../cfi_blocklist.txt"
  }
  branch_protector_ret = "pac_ret"
  include_dirs = [
    "mock",
    "../../../frameworks/native/executors/include",
    "../../../interfaces/inner_api/iam_executor",
    "../../../frameworks/native/executors/include/async_command",
    "../../../frameworks/native/executors/include/framework",
    "../../../frameworks/native/executors/include/listener",
    "../../../common/utils",
    "../../../common/logs",
  ]

  sources = [
    "../../../frameworks/native/executors/src/async_command/async_command_base.cpp",
    "../../../frameworks/native/executors/src/async_command/auth_command.cpp",
    "../../../frameworks/native/executors/src/async_command/collect_command.cpp",
    "../../../frameworks/native/executors/src/async_command/custom_command.cpp",
    "../../../frameworks/native/executors/src/async_command/enroll_command.cpp",
    "../../../frameworks/native/executors/src/async_command/identify_command.cpp",
    "../../../frameworks/native/executors/src/driver.cpp",
    "../../../frameworks/native/executors/src/driver_manager.cpp",
    "../../../frameworks/native/executors/src/executor.cpp",
    "../../../frameworks/native/executors/src/framework/executor_mgr_wrapper.cpp",
    "../../../frameworks/native/executors/src/framework/framework_executor_callback.cpp",
    "../../../frameworks/native/executors/src/iauth_executor_hdi.cpp",
    "../../../frameworks/native/executors/src/idriver_manager.cpp",
    "../../../frameworks/native/executors/src/listener/auth_executor_mgr_status_listener.cpp",
    "../../../frameworks/native/executors/src/listener/driver_manager_status_listener.cpp",
    "auth_command_unit_test.cpp",
    "driver_manager_unit_test.cpp",
    "enroll_command_unit_test.cpp",
    "executor_unit_test.cpp",
    "iauth_executor_hdi_test.cpp",
    "identify_command_unit_test.cpp",
  ]

  remove_configs = [ "//build/config/compiler:no_exceptions" ]

  deps = [
    "../../../common:iam_utils",
    "../../../frameworks/native/client:userauth_client",
    "../../../frameworks/native/common:attributes",
    "../../../frameworks/native/common:dfx",
    "//third_party/googletest:gmock_main",
  ]

  external_deps = [
    "c_utils:utils",
    "hdf_core:libhdf_host",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hilog:libhilog",
    "init:libbeget_proxy",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]

  configs = [
    "../../../common:iam_log_config",
    "../../../common:iam_utils_config",
  ]

  module_out_path = "useriam/user_auth_framework"

  subsystem_name = "useriam"
  part_name = "user_auth_framework"
}
